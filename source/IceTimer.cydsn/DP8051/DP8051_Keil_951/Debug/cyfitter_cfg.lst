C51 COMPILER V9.51   CYFITTER_CFG                                                          03/22/2015 19:59:54 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB DF
                    -(DEBUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/cyfitter_cfg.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\cyfitt
                    -er_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator  3.1 SP1
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  25          
  26          
  27          #if defined(__C51__) || defined(__CX51__)
  28                  #define CYPACKED
  29                  #define CYPACKED_ATTR
  30                  #define CYALIGNED
  31                  
  32              #define CY_CFG_UNUSED
  33                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  34          
  35          
  36          
  37                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  38                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  39                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  40          #else
                      #error Unsupported toolchain
              #endif
  43          
  44          
  45          
  46          /* Clock startup error codes                                                   */
  47          #define CYCLOCKSTART_NO_ERROR    0u
  48          #define CYCLOCKSTART_XTAL_ERROR  1u
  49          #define CYCLOCKSTART_32KHZ_ERROR 2u
  50          #define CYCLOCKSTART_PLL_ERROR   3u
  51          
  52          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/22/2015 19:59:54 PAGE 2   

  53          /*******************************************************************************
  54          * Function Name: CyClockStartupError
  55          ********************************************************************************
  56          * Summary:
  57          *  If an error is encountered during clock configuration (crystal startup error,
  58          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  59          *  the customer, this function will stop in an infinite loop.
  60          *
  61          * Parameters:
  62          *   void
  63          *
  64          * Return:
  65          *   void
  66          *
  67          *******************************************************************************/
  68          CY_CFG_UNUSED
  69          static void CyClockStartupError(uint8 errorCode);
  70          CY_CFG_UNUSED
  71          static void CyClockStartupError(uint8 errorCode)
  72          {
  73   1          /* To remove the compiler warning if errorCode not used.                */
  74   1          errorCode = errorCode;
  75   1      
  76   1          /* `#START CyClockStartupError` */
  77   1      
  78   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  79   1          /* we will end up here to allow the customer to implement something to  */
  80   1          /* deal with the clock condition.                                       */
  81   1      
  82   1          /* `#END` */
  83   1      
  84   1          /* If nothing else, stop here since the clocks have not started         */
  85   1          /* correctly.                                                           */
  86   1          while(1) {}
  87   1      }
  88          #endif
  89          
  90          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
  91          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x00080000u)
  92          
  93          
  94          /*******************************************************************************
  95          * Function Name: ClockSetup
  96          ********************************************************************************
  97          *
  98          * Summary:
  99          *  Performs the initialization of all of the clocks in the device based on the
 100          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 101          *  clocks and setting the necessary dividers to produce the desired frequency. 
 102          *
 103          * Parameters:
 104          *  void
 105          *
 106          * Return:
 107          *  void
 108          *
 109          *******************************************************************************/
 110          static void ClockSetup(void);
 111          static void ClockSetup(void)
 112          {
 113   1              uint32 timeout;
 114   1              uint8 pllLock;
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/22/2015 19:59:54 PAGE 3   

 115   1      
 116   1      
 117   1              /* Configure ILO based on settings from Clock DWR */
 118   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 119   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 120   1      
 121   1              /* Configure IMO based on settings from Clock DWR */
 122   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 123   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 124   1      
 125   1              /* Configure PLL based on settings from Clock DWR */
 126   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008u);
 127   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 128   1              /* Wait up to 250us for the PLL to lock */
 129   1              pllLock = 0u;
 130   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 131   1              { 
 132   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 133   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 134   2              }
 135   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 136   1              if (timeout == 0u)
 137   1              {
 138   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 139   2              }
 140   1      
 141   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 142   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 143   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 144   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 145   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 146   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 147   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 148   1      }
 149          
 150          
 151          /* Analog API Functions */
 152          
 153          
 154          /*******************************************************************************
 155          * Function Name: AnalogSetDefault
 156          ********************************************************************************
 157          *
 158          * Summary:
 159          *  Sets up the analog portions of the chip to default values based on chip
 160          *  configuration options from the project.
 161          *
 162          * Parameters:
 163          *  void
 164          *
 165          * Return:
 166          *  void
 167          *
 168          *******************************************************************************/
 169          static void AnalogSetDefault(void);
 170          static void AnalogSetDefault(void)
 171          {
 172   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 173   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 174   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/22/2015 19:59:54 PAGE 4   

 175   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 176   1      }
 177          
 178          
 179          /*******************************************************************************
 180          * Function Name: SetAnalogRoutingPumps
 181          ********************************************************************************
 182          *
 183          * Summary:
 184          * Enables or disables the analog pumps feeding analog routing switches.
 185          * Intended to be called at startup, based on the Vdda system configuration;
 186          * may be called during operation when the user informs us that the Vdda voltage
 187          * crossed the pump threshold.
 188          *
 189          * Parameters:
 190          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 191          *
 192          * Return:
 193          *  void
 194          *
 195          *******************************************************************************/
 196          void SetAnalogRoutingPumps(uint8 enabled)
 197          {
 198   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 199   1              if (enabled != 0u)
 200   1              {
 201   2                      regValue |= 0x00u;
 202   2              }
 203   1              else
 204   1              {
 205   2                      regValue &= (uint8)~0x00u;
 206   2              }
 207   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 208   1      }
 209          
 210          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 211          
 212          
 213          /*******************************************************************************
 214          * Function Name: cyfitter_cfg
 215          ********************************************************************************
 216          * Summary:
 217          *  This function is called by the start-up code for the selected device. It
 218          *  performs all of the necessary device configuration based on the design
 219          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 220          *  as Clocks and Pins as well as any component configuration that is necessary.
 221          *
 222          * Parameters:  
 223          *   void
 224          *
 225          * Return:
 226          *   void
 227          *
 228          *******************************************************************************/
 229          
 230          void cyfitter_cfg(void)
 231          {
 232   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 233   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 234   1      
 235   1              {
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/22/2015 19:59:54 PAGE 5   

 236   2      
 237   2                      CYPACKED typedef struct {
 238   2                              void CYFAR *address;
 239   2                              uint16 size;
 240   2                      } CYPACKED_ATTR cfg_memset_t;
 241   2      
 242   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 243   2                              /* address, size */
 244   2                              {(void CYFAR *)(CYREG_PRT0_DR), 32u},
 245   2                              {(void CYFAR *)(CYREG_PRT3_DR), 64u},
 246   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 247   2                              {(void CYFAR *)(CYREG_PRT15_DR), 16u},
 248   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 249   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 250   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 251   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 252   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 253   2                      };
 254   2      
 255   2                      uint8 CYDATA i;
 256   2      
 257   2                      /* Zero out critical memory blocks before beginning configuration */
 258   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 259   2                      {
 260   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 261   3                              CYMEMZERO(ms->address, ms->size);
 262   3                      }
 263   2      
 264   2                      /* Enable digital routing */
 265   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 266   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 267   2      
 268   2                      /* Enable UDB array */
 269   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 270   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 271   2              }
 272   1      
 273   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 274   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 275   1      
 276   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 277   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 278   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 279   1              {
 280   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 281   2              }
 282   1      
 283   1      
 284   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 285   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 286   1              /* Setup clocks based on selections from Clock DWR */
 287   1              ClockSetup();
 288   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 289   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 290   1      
 291   1              /* Perform basic analog initialization to defaults */
 292   1              AnalogSetDefault();
 293   1      
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/22/2015 19:59:54 PAGE 6   

 294   1              /* Configure alternate active mode */
 295   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 296   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 297   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/22/2015 19:59:54 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 71
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 74
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 86
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 118
0000 904300            MOV     DPTR,#04300H
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
0006 904000            MOV     DPTR,#04000H
0009 7408              MOV     A,#08H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
000C 904200            MOV     DPTR,#04200H
000F 7403              MOV     A,#03H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
0012 7B0C              MOV     R3,#0CH
0014 7A01              MOV     R2,#01H
0016 7908              MOV     R1,#08H
0018 120000      E     LCALL   _cyread8
001B 9046A1            MOV     DPTR,#046A1H
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0020 7B00              MOV     R3,#00H
0022 7A42              MOV     R2,#042H
0024 7922              MOV     R1,#022H
0026 7D08              MOV     R5,#08H
0028 7C00              MOV     R4,#00H
002A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 127
002D 7B00              MOV     R3,#00H
002F 7A42              MOV     R2,#042H
0031 7920              MOV     R1,#020H
0033 7D51              MOV     R5,#051H
0035 7C12              MOV     R4,#012H
0037 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 129
003A 900000      R     MOV     DPTR,#pllLock
003D E4                CLR     A
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/22/2015 19:59:54 PAGE 8   

003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
003F 7F19              MOV     R7,#019H
0041 7E00              MOV     R6,#00H
0043 7D00              MOV     R5,#00H
0045 7C00              MOV     R4,#00H
0047 900000      R     MOV     DPTR,#timeout
004A 120000      E     LCALL   ?C?LSTXDATA
004D         ?C0004:
004D 900000      R     MOV     DPTR,#timeout
0050 120000      E     LCALL   ?C?LLDXDATA
0053 D3                SETB    C
0054 EF                MOV     A,R7
0055 9400              SUBB    A,#00H
0057 EE                MOV     A,R6
0058 9400              SUBB    A,#00H
005A 404E              JC      ?C0005
005C 900000      R     MOV     DPTR,#pllLock
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 EF                MOV     A,R7
0062 6403              XRL     A,#03H
0064 6044              JZ      ?C0005
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
0066 904225            MOV     DPTR,#04225H
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 5401              ANL     A,#01H
006E FF                MOV     R7,A
006F 7E00              MOV     R6,#00H
0071 900000      R     MOV     DPTR,#pllLock
0074 E0                MOVX    A,@DPTR
0075 FE                MOV     R6,A
0076 EE                MOV     A,R6
0077 25E0              ADD     A,ACC
0079 FE                MOV     R6,A
007A EE                MOV     A,R6
007B 4F                ORL     A,R7
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E 5403              ANL     A,#03H
0080 FF                MOV     R7,A
0081 900000      R     MOV     DPTR,#pllLock
0084 EF                MOV     A,R7
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
0086 7FE0              MOV     R7,#0E0H
0088 7E01              MOV     R6,#01H
008A 7D00              MOV     R5,#00H
008C 7C00              MOV     R4,#00H
008E 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 134
0091 900000      R     MOV     DPTR,#timeout
0094 120000      E     LCALL   ?C?LLDXDATA
0097 7BFF              MOV     R3,#0FFH
0099 7AFF              MOV     R2,#0FFH
009B 79FF              MOV     R1,#0FFH
009D 78FF              MOV     R0,#0FFH
009F 120000      E     LCALL   ?C?LADD
00A2 900000      R     MOV     DPTR,#timeout
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/22/2015 19:59:54 PAGE 9   

00A5 120000      E     LCALL   ?C?LSTXDATA
00A8 80A3              SJMP    ?C0004
00AA         ?C0005:
                                           ; SOURCE LINE # 136
00AA 900000      R     MOV     DPTR,#timeout
00AD 120000      E     LCALL   ?C?LLDXDATA
00B0 EF                MOV     A,R7
00B1 4E                ORL     A,R6
00B2 7005              JNZ     ?C0007
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
00B4 7F03              MOV     R7,#03H
00B6 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 139
00B9         ?C0007:
                                           ; SOURCE LINE # 142
00B9 7B00              MOV     R3,#00H
00BB 7A40              MOV     R2,#040H
00BD 7904              MOV     R1,#04H
00BF 7D00              MOV     R5,#00H
00C1 7C01              MOV     R4,#01H
00C3 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 143
00C6 904004            MOV     DPTR,#04004H
00C9 7407              MOV     A,#07H
00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
00CC 904006            MOV     DPTR,#04006H
00CF E4                CLR     A
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 145
00D1 904008            MOV     DPTR,#04008H
00D4 7448              MOV     A,#048H
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
00D7 904004            MOV     DPTR,#04004H
00DA E4                CLR     A
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
00DC 904001            MOV     DPTR,#04001H
00DF 7402              MOV     A,#02H
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
00E2 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/22/2015 19:59:54 PAGE 10  

0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 196
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0010
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4400              ORL     A,#00H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
0025 800E              SJMP    ?C0011
0027         ?C0010:
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/22/2015 19:59:54 PAGE 11  

0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FF              ANL     A,#0FFH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
0035         ?C0011:
                                           ; SOURCE LINE # 207
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 233
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4405              ORL     A,#05H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 258
0016 750000      R     MOV     i,#00H
0019         ?C0013:
0019 E500        R     MOV     A,i
001B C3                CLR     C
001C 9409              SUBB    A,#09H
001E 503A              JNC     ?C0014
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
0020 AF00        R     MOV     R7,i
0022 EF                MOV     A,R7
0023 75F005            MOV     B,#05H
0026 A4                MUL     AB
0027 2400        R     ADD     A,#LOW cfg_memset_list
0029 F582              MOV     DPL,A
002B E4                CLR     A
002C 3400        R     ADDC    A,#HIGH cfg_memset_list
002E F583              MOV     DPH,A
0030 AF82              MOV     R7,DPL
0032 AE83              MOV     R6,DPH
0034 8E00        R     MOV     ms,R6
0036 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 261
0038 AE00        R     MOV     R6,ms
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/22/2015 19:59:54 PAGE 12  

003A AF00        R     MOV     R7,ms+01H
003C 8F82              MOV     DPL,R7
003E 8E83              MOV     DPH,R6
0040 120000      E     LCALL   ?C?PLDCODE
0043 AE00        R     MOV     R6,ms
0045 AF00        R     MOV     R7,ms+01H
0047 8F82              MOV     DPL,R7
0049 8E83              MOV     DPH,R6
004B 7403              MOV     A,#03H
004D 93                MOVC    A,@A+DPTR
004E FC                MOV     R4,A
004F 7404              MOV     A,#04H
0051 93                MOVC    A,@A+DPTR
0052 FD                MOV     R5,A
0053 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 262
0056 0500        R     INC     i
0058 80BF              SJMP    ?C0013
005A         ?C0014:
                                           ; SOURCE LINE # 265
005A 7B01              MOV     R3,#01H
005C 7A50              MOV     R2,#050H
005E 7903              MOV     R1,#03H
0060 120000      E     LCALL   _cyread8
0063 EF                MOV     A,R7
0064 4402              ORL     A,#02H
0066 FD                MOV     R5,A
0067 7B01              MOV     R3,#01H
0069 7A50              MOV     R2,#050H
006B 7903              MOV     R1,#03H
006D 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 266
0070 7B01              MOV     R3,#01H
0072 7A50              MOV     R2,#050H
0074 7913              MOV     R1,#013H
0076 120000      E     LCALL   _cyread8
0079 EF                MOV     A,R7
007A 4402              ORL     A,#02H
007C FD                MOV     R5,A
007D 7B01              MOV     R3,#01H
007F 7A50              MOV     R2,#050H
0081 7913              MOV     R1,#013H
0083 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 269
0086 9043A0            MOV     DPTR,#043A0H
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B EF                MOV     A,R7
008C 4440              ORL     A,#040H
008E FF                MOV     R7,A
008F 9043A0            MOV     DPTR,#043A0H
0092 EF                MOV     A,R7
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
0094 9043C2            MOV     DPTR,#043C2H
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 EF                MOV     A,R7
009A 4410              ORL     A,#010H
009C FF                MOV     R7,A
009D 9043C2            MOV     DPTR,#043C2H
00A0 EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/22/2015 19:59:54 PAGE 13  

00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 274
00A2 7B08              MOV     R3,#08H
00A4 7A00              MOV     R2,#00H
00A6 7900              MOV     R1,#00H
00A8 C003              PUSH    AR3
00AA C002              PUSH    AR2
00AC C001              PUSH    AR1
00AE 7B00              MOV     R3,#00H
00B0 7A51              MOV     R2,#051H
00B2 7922              MOV     R1,#022H
00B4 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00B7 120000      E     LCALL   ?C?PSTXDATA
00BA D001              POP     AR1
00BC D002              POP     AR2
00BE D003              POP     AR3
00C0 7F08              MOV     R7,#08H
00C2 7E00              MOV     R6,#00H
00C4 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 277
00C7 904322            MOV     DPTR,#04322H
00CA E0                MOVX    A,@DPTR
00CB FF                MOV     R7,A
00CC EF                MOV     A,R7
00CD 4408              ORL     A,#08H
00CF FF                MOV     R7,A
00D0 904322            MOV     DPTR,#04322H
00D3 EF                MOV     A,R7
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
00D5 9046EC            MOV     DPTR,#046ECH
00D8 E0                MOVX    A,@DPTR
00D9 FF                MOV     R7,A
00DA EF                MOV     A,R7
00DB C3                CLR     C
00DC 9405              SUBB    A,#05H
00DE 5006              JNC     ?C0016
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
00E0 904689            MOV     DPTR,#04689H
00E3 743A              MOV     A,#03AH
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
00E6         ?C0016:
                                           ; SOURCE LINE # 285
00E6 904800            MOV     DPTR,#04800H
00E9 74F1              MOV     A,#0F1H
00EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
00EC 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 289
00EF 904800            MOV     DPTR,#04800H
00F2 74B1              MOV     A,#0B1H
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
00F5 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 295
00F8 7B00              MOV     R3,#00H
00FA 7A43              MOV     R2,#043H
00FC 79A0              MOV     R1,#0A0H
00FE C003              PUSH    AR3
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/22/2015 19:59:54 PAGE 14  

0100 C002              PUSH    AR2
0102 C001              PUSH    AR1
0104 7B00              MOV     R3,#00H
0106 7A43              MOV     R2,#043H
0108 79B0              MOV     R1,#0B0H
010A 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
010D 120000      E     LCALL   ?C?PSTXDATA
0110 D001              POP     AR1
0112 D002              POP     AR2
0114 D003              POP     AR3
0116 7F0E              MOV     R7,#0EH
0118 7E00              MOV     R6,#00H
011A 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 296
011D 9043B0            MOV     DPTR,#043B0H
0120 E0                MOVX    A,@DPTR
0121 FF                MOV     R7,A
0122 EF                MOV     A,R7
0123 54FD              ANL     A,#0FDH
0125 FF                MOV     R7,A
0126 EF                MOV     A,R7
0127 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 297
0128 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    660    ----
   CONSTANT SIZE    =     45    ----
   XDATA SIZE       =   ----       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
