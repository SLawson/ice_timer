C51 COMPILER V9.51   READYTIMER_ISR                                                        03/22/2015 23:02:11 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE READYTIMER_ISR
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\readyTimer_ISR.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\readyTimer_ISR.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB 
                    -DF(DEBUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/readyTimer_ISR.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\re
                    -adyTimer_ISR.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: readyTimer_ISR.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include <cydevice_trm.h>
  19          #include <CyLib.h>
  20          #include <readyTimer_ISR.h>
  21          
  22          #if !defined(readyTimer_ISR__REMOVED) /* Check for removal by optimization */
  23          
  24          /*******************************************************************************
  25          *  Place your includes, defines and code here 
  26          ********************************************************************************/
  27          /* `#START readyTimer_ISR_intc` */
  28          
  29          #include <project.h>
  30              
  31          /* `#END` */
  32          
  33          
  34          /*******************************************************************************
  35          * Function Name: readyTimer_ISR_Start
  36          ********************************************************************************
  37          *
  38          * Summary:
  39          *  Set up the interrupt and enable it.
  40          *
  41          * Parameters:  
  42          *   None
  43          *
  44          * Return:
  45          *   None
  46          *
  47          *******************************************************************************/
  48          void readyTimer_ISR_Start(void) 
  49          {
  50   1          /* For all we know the interrupt is active. */
  51   1          readyTimer_ISR_Disable();
  52   1      
C51 COMPILER V9.51   READYTIMER_ISR                                                        03/22/2015 23:02:11 PAGE 2   

  53   1          /* Set the ISR to point to the readyTimer_ISR Interrupt. */
  54   1          readyTimer_ISR_SetVector(&readyTimer_ISR_Interrupt);
  55   1      
  56   1          /* Set the priority. */
  57   1          readyTimer_ISR_SetPriority((uint8)readyTimer_ISR_INTC_PRIOR_NUMBER);
  58   1      
  59   1          /* Enable it. */
  60   1          readyTimer_ISR_Enable();
  61   1      }
  62          
  63          
  64          /*******************************************************************************
  65          * Function Name: readyTimer_ISR_StartEx
  66          ********************************************************************************
  67          *
  68          * Summary:
  69          *  Set up the interrupt and enable it.
  70          *
  71          * Parameters:  
  72          *   address: Address of the ISR to set in the interrupt vector table.
  73          *
  74          * Return:
  75          *   None
  76          *
  77          *******************************************************************************/
  78          void readyTimer_ISR_StartEx(cyisraddress address) 
  79          {
  80   1          /* For all we know the interrupt is active. */
  81   1          readyTimer_ISR_Disable();
  82   1      
  83   1          /* Set the ISR to point to the readyTimer_ISR Interrupt. */
  84   1          readyTimer_ISR_SetVector(address);
  85   1      
  86   1          /* Set the priority. */
  87   1          readyTimer_ISR_SetPriority((uint8)readyTimer_ISR_INTC_PRIOR_NUMBER);
  88   1      
  89   1          /* Enable it. */
  90   1          readyTimer_ISR_Enable();
  91   1      }
  92          
  93          
  94          /*******************************************************************************
  95          * Function Name: readyTimer_ISR_Stop
  96          ********************************************************************************
  97          *
  98          * Summary:
  99          *   Disables and removes the interrupt.
 100          *
 101          * Parameters:  
 102          *   None
 103          *
 104          * Return:
 105          *   None
 106          *
 107          *******************************************************************************/
 108          void readyTimer_ISR_Stop(void) 
 109          {
 110   1          /* Disable this interrupt. */
 111   1          readyTimer_ISR_Disable();
 112   1      }
 113          
 114          
C51 COMPILER V9.51   READYTIMER_ISR                                                        03/22/2015 23:02:11 PAGE 3   

 115          /*******************************************************************************
 116          * Function Name: readyTimer_ISR_Interrupt
 117          ********************************************************************************
 118          * Summary:
 119          *   The default Interrupt Service Routine for readyTimer_ISR.
 120          *
 121          *   Add custom code between the coments to keep the next version of this file
 122          *   from over writting your code.
 123          *
 124          * Parameters:  
 125          *   None
 126          *
 127          * Return:
 128          *   None
 129          *
 130          *******************************************************************************/
 131          CY_ISR(readyTimer_ISR_Interrupt)
 132          {
 133   1          /*  Place your Interrupt code here. */
 134   1          /* `#START readyTimer_ISR_Interrupt` */
 135   1      
 136   1          LCD_ClearDisplay();
 137   1          LCD_Position(0,0);
 138   1          LCD_PrintString("Ready to begin");
 139   1          LCD_Position(1,0);
 140   1          LCD_PrintString("timing...");
 141   1          
 142   1          /* `#END` */
 143   1      
 144   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 145   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 146   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (readyTimer_ISR__ES2_PATCH ))     
             - 
                          readyTimer_ISR_ISR_PATCH();
                      #endif /* CYDEV_CHIP_REVISION_USED */
 149   1          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3) */
 150   1      }
 151          
 152          
 153          /*******************************************************************************
 154          * Function Name: readyTimer_ISR_SetVector
 155          ********************************************************************************
 156          *
 157          * Summary:
 158          *   Change the ISR vector for the Interrupt. Note calling readyTimer_ISR_Start
 159          *   will override any effect this method would have had. To set the vector 
 160          *   before the component has been started use readyTimer_ISR_StartEx instead.
 161          *
 162          * Parameters:
 163          *   address: Address of the ISR to set in the interrupt vector table.
 164          *
 165          * Return:
 166          *   None
 167          *
 168          *******************************************************************************/
 169          void readyTimer_ISR_SetVector(cyisraddress address) 
 170          {
 171   1          CY_SET_REG16(readyTimer_ISR_INTC_VECTOR, (uint16) address);
 172   1      }
 173          
 174          
 175          /*******************************************************************************
C51 COMPILER V9.51   READYTIMER_ISR                                                        03/22/2015 23:02:11 PAGE 4   

 176          * Function Name: readyTimer_ISR_GetVector
 177          ********************************************************************************
 178          *
 179          * Summary:
 180          *   Gets the "address" of the current ISR vector for the Interrupt.
 181          *
 182          * Parameters:
 183          *   None
 184          *
 185          * Return:
 186          *   Address of the ISR in the interrupt vector table.
 187          *
 188          *******************************************************************************/
 189          cyisraddress readyTimer_ISR_GetVector(void) 
 190          {
 191   1          return (cyisraddress) CY_GET_REG16(readyTimer_ISR_INTC_VECTOR);
 192   1      }
 193          
 194          
 195          /*******************************************************************************
 196          * Function Name: readyTimer_ISR_SetPriority
 197          ********************************************************************************
 198          *
 199          * Summary:
 200          *   Sets the Priority of the Interrupt. Note calling readyTimer_ISR_Start
 201          *   or readyTimer_ISR_StartEx will override any effect this method would 
 202          *   have had. This method should only be called after readyTimer_ISR_Start or 
 203          *   readyTimer_ISR_StartEx has been called. To set the initial
 204          *   priority for the component use the cydwr file in the tool.
 205          *
 206          * Parameters:
 207          *   priority: Priority of the interrupt. 0 - 7, 0 being the highest.
 208          *
 209          * Return:
 210          *   None
 211          *
 212          *******************************************************************************/
 213          void readyTimer_ISR_SetPriority(uint8 priority) 
 214          {
 215   1          *readyTimer_ISR_INTC_PRIOR = priority << 5;
 216   1      }
 217          
 218          
 219          /*******************************************************************************
 220          * Function Name: readyTimer_ISR_GetPriority
 221          ********************************************************************************
 222          *
 223          * Summary:
 224          *   Gets the Priority of the Interrupt.
 225          *
 226          * Parameters:
 227          *   None
 228          *
 229          * Return:
 230          *   Priority of the interrupt. 0 - 7, 0 being the highest.
 231          *
 232          *******************************************************************************/
 233          uint8 readyTimer_ISR_GetPriority(void) 
 234          {
 235   1          uint8 priority;
 236   1      
 237   1      
C51 COMPILER V9.51   READYTIMER_ISR                                                        03/22/2015 23:02:11 PAGE 5   

 238   1          priority = *readyTimer_ISR_INTC_PRIOR >> 5;
 239   1      
 240   1          return priority;
 241   1      }
 242          
 243          
 244          /*******************************************************************************
 245          * Function Name: readyTimer_ISR_Enable
 246          ********************************************************************************
 247          *
 248          * Summary:
 249          *   Enables the interrupt.
 250          *
 251          * Parameters:
 252          *   None
 253          *
 254          * Return:
 255          *   None
 256          *
 257          *******************************************************************************/
 258          void readyTimer_ISR_Enable(void) 
 259          {
 260   1          /* Enable the general interrupt. */
 261   1          *readyTimer_ISR_INTC_SET_EN = readyTimer_ISR__INTC_MASK;
 262   1      }
 263          
 264          
 265          /*******************************************************************************
 266          * Function Name: readyTimer_ISR_GetState
 267          ********************************************************************************
 268          *
 269          * Summary:
 270          *   Gets the state (enabled, disabled) of the Interrupt.
 271          *
 272          * Parameters:
 273          *   None
 274          *
 275          * Return:
 276          *   1 if enabled, 0 if disabled.
 277          *
 278          *******************************************************************************/
 279          uint8 readyTimer_ISR_GetState(void) 
 280          {
 281   1          /* Get the state of the general interrupt. */
 282   1          return ((*readyTimer_ISR_INTC_SET_EN & (uint8)readyTimer_ISR__INTC_MASK) != 0u) ? 1u:0u;
 283   1      }
 284          
 285          
 286          /*******************************************************************************
 287          * Function Name: readyTimer_ISR_Disable
 288          ********************************************************************************
 289          *
 290          * Summary:
 291          *   Disables the Interrupt.
 292          *
 293          * Parameters:
 294          *   None
 295          *
 296          * Return:
 297          *   None
 298          *
 299          *******************************************************************************/
C51 COMPILER V9.51   READYTIMER_ISR                                                        03/22/2015 23:02:11 PAGE 6   

 300          void readyTimer_ISR_Disable(void) 
 301          {
 302   1          /* Disable the general interrupt. */
 303   1          *readyTimer_ISR_INTC_CLR_EN = readyTimer_ISR__INTC_MASK;
 304   1      }
 305          
 306          
 307          /*******************************************************************************
 308          * Function Name: readyTimer_ISR_SetPending
 309          ********************************************************************************
 310          *
 311          * Summary:
 312          *   Causes the Interrupt to enter the pending state, a software method of
 313          *   generating the interrupt.
 314          *
 315          * Parameters:
 316          *   None
 317          *
 318          * Return:
 319          *   None
 320          *
 321          *******************************************************************************/
 322          void readyTimer_ISR_SetPending(void) 
 323          {
 324   1          *readyTimer_ISR_INTC_SET_PD = readyTimer_ISR__INTC_MASK;
 325   1      }
 326          
 327          
 328          /*******************************************************************************
 329          * Function Name: readyTimer_ISR_ClearPending
 330          ********************************************************************************
 331          *
 332          * Summary:
 333          *   Clears a pending interrupt.
 334          *
 335          * Parameters:
 336          *   None
 337          *
 338          * Return:
 339          *   None
 340          *
 341          *******************************************************************************/
 342          void readyTimer_ISR_ClearPending(void) 
 343          {
 344   1          *readyTimer_ISR_INTC_CLR_PD = readyTimer_ISR__INTC_MASK;
 345   1      }
 346          
 347          #endif /* End check for removal by optimization */
 348          
 349          
 350          /* [] END OF FILE */
C51 COMPILER V9.51   READYTIMER_ISR                                                        03/22/2015 23:02:11 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION readyTimer_ISR_Start (BEGIN)
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 51
0000 120000      R     LCALL   readyTimer_ISR_Disable
                                           ; SOURCE LINE # 54
0003 7E00        R     MOV     R6,#HIGH readyTimer_ISR_Interrupt
0005 7F00        R     MOV     R7,#LOW readyTimer_ISR_Interrupt
0007 120000      R     LCALL   _readyTimer_ISR_SetVector
                                           ; SOURCE LINE # 57
000A 7F07              MOV     R7,#07H
000C 120000      R     LCALL   _readyTimer_ISR_SetPriority
                                           ; SOURCE LINE # 60
000F 120000      R     LCALL   readyTimer_ISR_Enable
                                           ; SOURCE LINE # 61
0012 22                RET     
             ; FUNCTION readyTimer_ISR_Start (END)

             ; FUNCTION _readyTimer_ISR_StartEx (BEGIN)
                                           ; SOURCE LINE # 78
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 81
0008 120000      R     LCALL   readyTimer_ISR_Disable
                                           ; SOURCE LINE # 84
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _readyTimer_ISR_SetVector
                                           ; SOURCE LINE # 87
0016 7F07              MOV     R7,#07H
0018 120000      R     LCALL   _readyTimer_ISR_SetPriority
                                           ; SOURCE LINE # 90
001B 120000      R     LCALL   readyTimer_ISR_Enable
                                           ; SOURCE LINE # 91
001E 22                RET     
             ; FUNCTION _readyTimer_ISR_StartEx (END)

             ; FUNCTION readyTimer_ISR_Stop (BEGIN)
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 111
0000 120000      R     LCALL   readyTimer_ISR_Disable
                                           ; SOURCE LINE # 112
0003 22                RET     
             ; FUNCTION readyTimer_ISR_Stop (END)

             ; FUNCTION readyTimer_ISR_Interrupt (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
C51 COMPILER V9.51   READYTIMER_ISR                                                        03/22/2015 23:02:11 PAGE 8   

0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 136
002B 7F01              MOV     R7,#01H
002D 120000      E     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 137
0030 7D00              MOV     R5,#00H
0032 7F00              MOV     R7,#00H
0034 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 138
0037 7BFF              MOV     R3,#0FFH
0039 7A00        R     MOV     R2,#HIGH ?SC_0
003B 7900        R     MOV     R1,#LOW ?SC_0
003D 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 139
0040 7D00              MOV     R5,#00H
0042 7F01              MOV     R7,#01H
0044 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 140
0047 7BFF              MOV     R3,#0FFH
0049 7A00        R     MOV     R2,#HIGH ?SC_15
004B 7900        R     MOV     R1,#LOW ?SC_15
004D 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 150
0050 D007              POP     AR7
0052 D006              POP     AR6
0054 D005              POP     AR5
0056 D004              POP     AR4
0058 D003              POP     AR3
005A D002              POP     AR2
005C D001              POP     AR1
005E D000              POP     AR0
0060 D0D0              POP     PSW
0062 D000        E     POP     ?C?XPAGE1SFR
0064 D086              POP     DPS
0066 D084              POP     DPL1
0068 D085              POP     DPH1
006A D082              POP     DPL
006C D083              POP     DPH
006E D0F0              POP     B
0070 D0E0              POP     ACC
0072 32                RETI    
             ; FUNCTION readyTimer_ISR_Interrupt (END)

             ; FUNCTION _readyTimer_ISR_SetVector (BEGIN)
                                           ; SOURCE LINE # 169
C51 COMPILER V9.51   READYTIMER_ISR                                                        03/22/2015 23:02:11 PAGE 9   

0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
0008 7B02              MOV     R3,#02H
000A 7A44              MOV     R2,#044H
000C 7900              MOV     R1,#00H
000E 900000      R     MOV     DPTR,#address
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 AD07              MOV     R5,AR7
0018 AC06              MOV     R4,AR6
001A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 172
001D 22                RET     
             ; FUNCTION _readyTimer_ISR_SetVector (END)

             ; FUNCTION readyTimer_ISR_GetVector (BEGIN)
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7900              MOV     R1,#00H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 192
0009         ?C0006:
0009 22                RET     
             ; FUNCTION readyTimer_ISR_GetVector (END)

             ; FUNCTION _readyTimer_ISR_SetPriority (BEGIN)
                                           ; SOURCE LINE # 213
0000 900000      R     MOV     DPTR,#priority
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
0005 900000      R     MOV     DPTR,#priority
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 33                RLC     A
000D 54E0              ANL     A,#0E0H
000F FF                MOV     R7,A
0010 904480            MOV     DPTR,#04480H
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
0015 22                RET     
             ; FUNCTION _readyTimer_ISR_SetPriority (END)

             ; FUNCTION readyTimer_ISR_GetPriority (BEGIN)
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 234
C51 COMPILER V9.51   READYTIMER_ISR                                                        03/22/2015 23:02:11 PAGE 10  

                                           ; SOURCE LINE # 238
0000 904480            MOV     DPTR,#04480H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 C4                SWAP    A
0007 13                RRC     A
0008 5407              ANL     A,#07H
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#priority
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
0010 900000      R     MOV     DPTR,#priority
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 241
0015         ?C0008:
0015 22                RET     
             ; FUNCTION readyTimer_ISR_GetPriority (END)

             ; FUNCTION readyTimer_ISR_Enable (BEGIN)
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 261
0000 9044C0            MOV     DPTR,#044C0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
0006 22                RET     
             ; FUNCTION readyTimer_ISR_Enable (END)

             ; FUNCTION readyTimer_ISR_GetState (BEGIN)
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 282
0000 9044C0            MOV     DPTR,#044C0H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E004            JNB     ACC.0,?C0010
0009 7F01              MOV     R7,#01H
000B 8002              SJMP    ?C0011
000D         ?C0010:
000D 7F00              MOV     R7,#00H
000F         ?C0011:
                                           ; SOURCE LINE # 283
000F         ?C0012:
000F 22                RET     
             ; FUNCTION readyTimer_ISR_GetState (END)

             ; FUNCTION readyTimer_ISR_Disable (BEGIN)
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 303
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 304
0006 22                RET     
             ; FUNCTION readyTimer_ISR_Disable (END)

C51 COMPILER V9.51   READYTIMER_ISR                                                        03/22/2015 23:02:11 PAGE 11  

             ; FUNCTION readyTimer_ISR_SetPending (BEGIN)
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
0000 9044D0            MOV     DPTR,#044D0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
0006 22                RET     
             ; FUNCTION readyTimer_ISR_SetPending (END)

             ; FUNCTION readyTimer_ISR_ClearPending (BEGIN)
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
0000 9044D8            MOV     DPTR,#044D8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 345
0006 22                RET     
             ; FUNCTION readyTimer_ISR_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    297    ----
   CONSTANT SIZE    =     25    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
