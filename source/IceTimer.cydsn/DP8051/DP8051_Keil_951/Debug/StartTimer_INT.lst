C51 COMPILER V9.51   STARTTIMER_INT                                                        03/22/2015 22:15:34 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE STARTTIMER_INT
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\StartTimer_INT.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\StartTimer_INT.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB 
                    -DF(DEBUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/StartTimer_INT.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\St
                    -artTimer_INT.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: StartTimer_INT.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include <cydevice_trm.h>
  19          #include <CyLib.h>
  20          #include <StartTimer_INT.h>
  21          
  22          #if !defined(StartTimer_INT__REMOVED) /* Check for removal by optimization */
  23          
  24          /*******************************************************************************
  25          *  Place your includes, defines and code here 
  26          ********************************************************************************/
  27          /* `#START StartTimer_INT_intc` */
  28          #include <project.h>
  29          /* `#END` */
  30          
  31          
  32          /*******************************************************************************
  33          * Function Name: StartTimer_INT_Start
  34          ********************************************************************************
  35          *
  36          * Summary:
  37          *  Set up the interrupt and enable it.
  38          *
  39          * Parameters:  
  40          *   None
  41          *
  42          * Return:
  43          *   None
  44          *
  45          *******************************************************************************/
  46          void StartTimer_INT_Start(void) 
  47          {
  48   1          /* For all we know the interrupt is active. */
  49   1          StartTimer_INT_Disable();
  50   1      
  51   1          /* Set the ISR to point to the StartTimer_INT Interrupt. */
  52   1          StartTimer_INT_SetVector(&StartTimer_INT_Interrupt);
C51 COMPILER V9.51   STARTTIMER_INT                                                        03/22/2015 22:15:34 PAGE 2   

  53   1      
  54   1          /* Set the priority. */
  55   1          StartTimer_INT_SetPriority((uint8)StartTimer_INT_INTC_PRIOR_NUMBER);
  56   1      
  57   1          /* Enable it. */
  58   1          StartTimer_INT_Enable();
  59   1      }
  60          
  61          
  62          /*******************************************************************************
  63          * Function Name: StartTimer_INT_StartEx
  64          ********************************************************************************
  65          *
  66          * Summary:
  67          *  Set up the interrupt and enable it.
  68          *
  69          * Parameters:  
  70          *   address: Address of the ISR to set in the interrupt vector table.
  71          *
  72          * Return:
  73          *   None
  74          *
  75          *******************************************************************************/
  76          void StartTimer_INT_StartEx(cyisraddress address) 
  77          {
  78   1          /* For all we know the interrupt is active. */
  79   1          StartTimer_INT_Disable();
  80   1      
  81   1          /* Set the ISR to point to the StartTimer_INT Interrupt. */
  82   1          StartTimer_INT_SetVector(address);
  83   1      
  84   1          /* Set the priority. */
  85   1          StartTimer_INT_SetPriority((uint8)StartTimer_INT_INTC_PRIOR_NUMBER);
  86   1      
  87   1          /* Enable it. */
  88   1          StartTimer_INT_Enable();
  89   1      }
  90          
  91          
  92          /*******************************************************************************
  93          * Function Name: StartTimer_INT_Stop
  94          ********************************************************************************
  95          *
  96          * Summary:
  97          *   Disables and removes the interrupt.
  98          *
  99          * Parameters:  
 100          *   None
 101          *
 102          * Return:
 103          *   None
 104          *
 105          *******************************************************************************/
 106          void StartTimer_INT_Stop(void) 
 107          {
 108   1          /* Disable this interrupt. */
 109   1          StartTimer_INT_Disable();
 110   1      }
 111          
 112          
 113          /*******************************************************************************
 114          * Function Name: StartTimer_INT_Interrupt
C51 COMPILER V9.51   STARTTIMER_INT                                                        03/22/2015 22:15:34 PAGE 3   

 115          ********************************************************************************
 116          * Summary:
 117          *   The default Interrupt Service Routine for StartTimer_INT.
 118          *
 119          *   Add custom code between the coments to keep the next version of this file
 120          *   from over writting your code.
 121          *
 122          * Parameters:  
 123          *   None
 124          *
 125          * Return:
 126          *   None
 127          *
 128          *******************************************************************************/
 129          CY_ISR(StartTimer_INT_Interrupt)
 130          {
 131   1          /*  Place your Interrupt code here. */
 132   1          /* `#START StartTimer_INT_Interrupt` */
 133   1      
 134   1          LCD_PrintString("Start Timer");
 135   1          StartTimerPin_ClearInterrupt();
 136   1          StartTimer_INT_ClearPending();
 137   1          
 138   1          /* `#END` */
 139   1      
 140   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 141   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 142   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (StartTimer_INT__ES2_PATCH ))     
             - 
                          StartTimer_INT_ISR_PATCH();
                      #endif /* CYDEV_CHIP_REVISION_USED */
 145   1          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3) */
 146   1      }
 147          
 148          
 149          /*******************************************************************************
 150          * Function Name: StartTimer_INT_SetVector
 151          ********************************************************************************
 152          *
 153          * Summary:
 154          *   Change the ISR vector for the Interrupt. Note calling StartTimer_INT_Start
 155          *   will override any effect this method would have had. To set the vector 
 156          *   before the component has been started use StartTimer_INT_StartEx instead.
 157          *
 158          * Parameters:
 159          *   address: Address of the ISR to set in the interrupt vector table.
 160          *
 161          * Return:
 162          *   None
 163          *
 164          *******************************************************************************/
 165          void StartTimer_INT_SetVector(cyisraddress address) 
 166          {
 167   1          CY_SET_REG16(StartTimer_INT_INTC_VECTOR, (uint16) address);
 168   1      }
 169          
 170          
 171          /*******************************************************************************
 172          * Function Name: StartTimer_INT_GetVector
 173          ********************************************************************************
 174          *
 175          * Summary:
C51 COMPILER V9.51   STARTTIMER_INT                                                        03/22/2015 22:15:34 PAGE 4   

 176          *   Gets the "address" of the current ISR vector for the Interrupt.
 177          *
 178          * Parameters:
 179          *   None
 180          *
 181          * Return:
 182          *   Address of the ISR in the interrupt vector table.
 183          *
 184          *******************************************************************************/
 185          cyisraddress StartTimer_INT_GetVector(void) 
 186          {
 187   1          return (cyisraddress) CY_GET_REG16(StartTimer_INT_INTC_VECTOR);
 188   1      }
 189          
 190          
 191          /*******************************************************************************
 192          * Function Name: StartTimer_INT_SetPriority
 193          ********************************************************************************
 194          *
 195          * Summary:
 196          *   Sets the Priority of the Interrupt. Note calling StartTimer_INT_Start
 197          *   or StartTimer_INT_StartEx will override any effect this method would 
 198          *   have had. This method should only be called after StartTimer_INT_Start or 
 199          *   StartTimer_INT_StartEx has been called. To set the initial
 200          *   priority for the component use the cydwr file in the tool.
 201          *
 202          * Parameters:
 203          *   priority: Priority of the interrupt. 0 - 7, 0 being the highest.
 204          *
 205          * Return:
 206          *   None
 207          *
 208          *******************************************************************************/
 209          void StartTimer_INT_SetPriority(uint8 priority) 
 210          {
 211   1          *StartTimer_INT_INTC_PRIOR = priority << 5;
 212   1      }
 213          
 214          
 215          /*******************************************************************************
 216          * Function Name: StartTimer_INT_GetPriority
 217          ********************************************************************************
 218          *
 219          * Summary:
 220          *   Gets the Priority of the Interrupt.
 221          *
 222          * Parameters:
 223          *   None
 224          *
 225          * Return:
 226          *   Priority of the interrupt. 0 - 7, 0 being the highest.
 227          *
 228          *******************************************************************************/
 229          uint8 StartTimer_INT_GetPriority(void) 
 230          {
 231   1          uint8 priority;
 232   1      
 233   1      
 234   1          priority = *StartTimer_INT_INTC_PRIOR >> 5;
 235   1      
 236   1          return priority;
 237   1      }
C51 COMPILER V9.51   STARTTIMER_INT                                                        03/22/2015 22:15:34 PAGE 5   

 238          
 239          
 240          /*******************************************************************************
 241          * Function Name: StartTimer_INT_Enable
 242          ********************************************************************************
 243          *
 244          * Summary:
 245          *   Enables the interrupt.
 246          *
 247          * Parameters:
 248          *   None
 249          *
 250          * Return:
 251          *   None
 252          *
 253          *******************************************************************************/
 254          void StartTimer_INT_Enable(void) 
 255          {
 256   1          /* Enable the general interrupt. */
 257   1          *StartTimer_INT_INTC_SET_EN = StartTimer_INT__INTC_MASK;
 258   1      }
 259          
 260          
 261          /*******************************************************************************
 262          * Function Name: StartTimer_INT_GetState
 263          ********************************************************************************
 264          *
 265          * Summary:
 266          *   Gets the state (enabled, disabled) of the Interrupt.
 267          *
 268          * Parameters:
 269          *   None
 270          *
 271          * Return:
 272          *   1 if enabled, 0 if disabled.
 273          *
 274          *******************************************************************************/
 275          uint8 StartTimer_INT_GetState(void) 
 276          {
 277   1          /* Get the state of the general interrupt. */
 278   1          return ((*StartTimer_INT_INTC_SET_EN & (uint8)StartTimer_INT__INTC_MASK) != 0u) ? 1u:0u;
 279   1      }
 280          
 281          
 282          /*******************************************************************************
 283          * Function Name: StartTimer_INT_Disable
 284          ********************************************************************************
 285          *
 286          * Summary:
 287          *   Disables the Interrupt.
 288          *
 289          * Parameters:
 290          *   None
 291          *
 292          * Return:
 293          *   None
 294          *
 295          *******************************************************************************/
 296          void StartTimer_INT_Disable(void) 
 297          {
 298   1          /* Disable the general interrupt. */
 299   1          *StartTimer_INT_INTC_CLR_EN = StartTimer_INT__INTC_MASK;
C51 COMPILER V9.51   STARTTIMER_INT                                                        03/22/2015 22:15:34 PAGE 6   

 300   1      }
 301          
 302          
 303          /*******************************************************************************
 304          * Function Name: StartTimer_INT_SetPending
 305          ********************************************************************************
 306          *
 307          * Summary:
 308          *   Causes the Interrupt to enter the pending state, a software method of
 309          *   generating the interrupt.
 310          *
 311          * Parameters:
 312          *   None
 313          *
 314          * Return:
 315          *   None
 316          *
 317          *******************************************************************************/
 318          void StartTimer_INT_SetPending(void) 
 319          {
 320   1          *StartTimer_INT_INTC_SET_PD = StartTimer_INT__INTC_MASK;
 321   1      }
 322          
 323          
 324          /*******************************************************************************
 325          * Function Name: StartTimer_INT_ClearPending
 326          ********************************************************************************
 327          *
 328          * Summary:
 329          *   Clears a pending interrupt.
 330          *
 331          * Parameters:
 332          *   None
 333          *
 334          * Return:
 335          *   None
 336          *
 337          *******************************************************************************/
 338          void StartTimer_INT_ClearPending(void) 
 339          {
 340   1          *StartTimer_INT_INTC_CLR_PD = StartTimer_INT__INTC_MASK;
 341   1      }
 342          
 343          #endif /* End check for removal by optimization */
 344          
 345          
 346          /* [] END OF FILE */
C51 COMPILER V9.51   STARTTIMER_INT                                                        03/22/2015 22:15:34 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION StartTimer_INT_Start (BEGIN)
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 49
0000 120000      R     LCALL   StartTimer_INT_Disable
                                           ; SOURCE LINE # 52
0003 7E00        R     MOV     R6,#HIGH StartTimer_INT_Interrupt
0005 7F00        R     MOV     R7,#LOW StartTimer_INT_Interrupt
0007 120000      R     LCALL   _StartTimer_INT_SetVector
                                           ; SOURCE LINE # 55
000A 7F07              MOV     R7,#07H
000C 120000      R     LCALL   _StartTimer_INT_SetPriority
                                           ; SOURCE LINE # 58
000F 120000      R     LCALL   StartTimer_INT_Enable
                                           ; SOURCE LINE # 59
0012 22                RET     
             ; FUNCTION StartTimer_INT_Start (END)

             ; FUNCTION _StartTimer_INT_StartEx (BEGIN)
                                           ; SOURCE LINE # 76
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 79
0008 120000      R     LCALL   StartTimer_INT_Disable
                                           ; SOURCE LINE # 82
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _StartTimer_INT_SetVector
                                           ; SOURCE LINE # 85
0016 7F07              MOV     R7,#07H
0018 120000      R     LCALL   _StartTimer_INT_SetPriority
                                           ; SOURCE LINE # 88
001B 120000      R     LCALL   StartTimer_INT_Enable
                                           ; SOURCE LINE # 89
001E 22                RET     
             ; FUNCTION _StartTimer_INT_StartEx (END)

             ; FUNCTION StartTimer_INT_Stop (BEGIN)
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 109
0000 120000      R     LCALL   StartTimer_INT_Disable
                                           ; SOURCE LINE # 110
0003 22                RET     
             ; FUNCTION StartTimer_INT_Stop (END)

             ; FUNCTION StartTimer_INT_Interrupt (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
C51 COMPILER V9.51   STARTTIMER_INT                                                        03/22/2015 22:15:34 PAGE 8   

0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 134
002B 7BFF              MOV     R3,#0FFH
002D 7A00        R     MOV     R2,#HIGH ?SC_0
002F 7900        R     MOV     R1,#LOW ?SC_0
0031 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 135
0034 120000      E     LCALL   StartTimerPin_ClearInterrupt
                                           ; SOURCE LINE # 136
0037 120000      R     LCALL   StartTimer_INT_ClearPending
                                           ; SOURCE LINE # 146
003A D007              POP     AR7
003C D006              POP     AR6
003E D005              POP     AR5
0040 D004              POP     AR4
0042 D003              POP     AR3
0044 D002              POP     AR2
0046 D001              POP     AR1
0048 D000              POP     AR0
004A D0D0              POP     PSW
004C D000        E     POP     ?C?XPAGE1SFR
004E D086              POP     DPS
0050 D084              POP     DPL1
0052 D085              POP     DPH1
0054 D082              POP     DPL
0056 D083              POP     DPH
0058 D0F0              POP     B
005A D0E0              POP     ACC
005C 32                RETI    
             ; FUNCTION StartTimer_INT_Interrupt (END)

             ; FUNCTION _StartTimer_INT_SetVector (BEGIN)
                                           ; SOURCE LINE # 165
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
0008 7B02              MOV     R3,#02H
000A 7A44              MOV     R2,#044H
000C 7908              MOV     R1,#08H
000E 900000      R     MOV     DPTR,#address
C51 COMPILER V9.51   STARTTIMER_INT                                                        03/22/2015 22:15:34 PAGE 9   

0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 AD07              MOV     R5,AR7
0018 AC06              MOV     R4,AR6
001A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 168
001D 22                RET     
             ; FUNCTION _StartTimer_INT_SetVector (END)

             ; FUNCTION StartTimer_INT_GetVector (BEGIN)
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7908              MOV     R1,#08H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 188
0009         ?C0006:
0009 22                RET     
             ; FUNCTION StartTimer_INT_GetVector (END)

             ; FUNCTION _StartTimer_INT_SetPriority (BEGIN)
                                           ; SOURCE LINE # 209
0000 900000      R     MOV     DPTR,#priority
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
0005 900000      R     MOV     DPTR,#priority
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 33                RLC     A
000D 54E0              ANL     A,#0E0H
000F FF                MOV     R7,A
0010 904484            MOV     DPTR,#04484H
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
0015 22                RET     
             ; FUNCTION _StartTimer_INT_SetPriority (END)

             ; FUNCTION StartTimer_INT_GetPriority (BEGIN)
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 234
0000 904484            MOV     DPTR,#04484H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 C4                SWAP    A
0007 13                RRC     A
0008 5407              ANL     A,#07H
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#priority
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
C51 COMPILER V9.51   STARTTIMER_INT                                                        03/22/2015 22:15:34 PAGE 10  

                                           ; SOURCE LINE # 236
0010 900000      R     MOV     DPTR,#priority
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 237
0015         ?C0008:
0015 22                RET     
             ; FUNCTION StartTimer_INT_GetPriority (END)

             ; FUNCTION StartTimer_INT_Enable (BEGIN)
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 257
0000 9044C0            MOV     DPTR,#044C0H
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0006 22                RET     
             ; FUNCTION StartTimer_INT_Enable (END)

             ; FUNCTION StartTimer_INT_GetState (BEGIN)
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 278
0000 9044C0            MOV     DPTR,#044C0H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E404            JNB     ACC.4,?C0010
0009 7F01              MOV     R7,#01H
000B 8002              SJMP    ?C0011
000D         ?C0010:
000D 7F00              MOV     R7,#00H
000F         ?C0011:
                                           ; SOURCE LINE # 279
000F         ?C0012:
000F 22                RET     
             ; FUNCTION StartTimer_INT_GetState (END)

             ; FUNCTION StartTimer_INT_Disable (BEGIN)
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 299
0000 9044C8            MOV     DPTR,#044C8H
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
0006 22                RET     
             ; FUNCTION StartTimer_INT_Disable (END)

             ; FUNCTION StartTimer_INT_SetPending (BEGIN)
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 320
0000 9044D0            MOV     DPTR,#044D0H
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 321
0006 22                RET     
             ; FUNCTION StartTimer_INT_SetPending (END)

             ; FUNCTION StartTimer_INT_ClearPending (BEGIN)
C51 COMPILER V9.51   STARTTIMER_INT                                                        03/22/2015 22:15:34 PAGE 11  

                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
0000 9044D8            MOV     DPTR,#044D8H
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 341
0006 22                RET     
             ; FUNCTION StartTimer_INT_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    275    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
