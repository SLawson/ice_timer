C51 COMPILER V9.51   STOPTIMER_ISR                                                         03/23/2015 22:46:16 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE STOPTIMER_ISR
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\stopTimer_ISR.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\stopTimer_ISR.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB D
                    -F(DEBUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/stopTimer_ISR.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\stop
                    -Timer_ISR.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: stopTimer_ISR.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include <cydevice_trm.h>
  19          #include <CyLib.h>
  20          #include <stopTimer_ISR.h>
  21          
  22          #if !defined(stopTimer_ISR__REMOVED) /* Check for removal by optimization */
  23          
  24          /*******************************************************************************
  25          *  Place your includes, defines and code here 
  26          ********************************************************************************/
  27          /* `#START stopTimer_ISR_intc` */
  28          
  29          #include <project.h>   
  30          #include <stdio.h>
  31              
  32          #define TIMER_INIT (2^32)
  33          #define CNT_PER_SEC 100
  34          #define CNT_PER_MIN (60 * CNT_PER_SEC)
  35          #define CNT_PER_HR  (60 * CNT_PER_SEC)
  36              
  37          /* `#END` */
  38          
  39          
  40          /*******************************************************************************
  41          * Function Name: stopTimer_ISR_Start
  42          ********************************************************************************
  43          *
  44          * Summary:
  45          *  Set up the interrupt and enable it.
  46          *
  47          * Parameters:  
  48          *   None
  49          *
  50          * Return:
  51          *   None
  52          *
C51 COMPILER V9.51   STOPTIMER_ISR                                                         03/23/2015 22:46:16 PAGE 2   

  53          *******************************************************************************/
  54          void stopTimer_ISR_Start(void) 
  55          {
  56   1          /* For all we know the interrupt is active. */
  57   1          stopTimer_ISR_Disable();
  58   1      
  59   1          /* Set the ISR to point to the stopTimer_ISR Interrupt. */
  60   1          stopTimer_ISR_SetVector(&stopTimer_ISR_Interrupt);
  61   1      
  62   1          /* Set the priority. */
  63   1          stopTimer_ISR_SetPriority((uint8)stopTimer_ISR_INTC_PRIOR_NUMBER);
  64   1      
  65   1          /* Enable it. */
  66   1          stopTimer_ISR_Enable();
  67   1      }
  68          
  69          
  70          /*******************************************************************************
  71          * Function Name: stopTimer_ISR_StartEx
  72          ********************************************************************************
  73          *
  74          * Summary:
  75          *  Set up the interrupt and enable it.
  76          *
  77          * Parameters:  
  78          *   address: Address of the ISR to set in the interrupt vector table.
  79          *
  80          * Return:
  81          *   None
  82          *
  83          *******************************************************************************/
  84          void stopTimer_ISR_StartEx(cyisraddress address) 
  85          {
  86   1          /* For all we know the interrupt is active. */
  87   1          stopTimer_ISR_Disable();
  88   1      
  89   1          /* Set the ISR to point to the stopTimer_ISR Interrupt. */
  90   1          stopTimer_ISR_SetVector(address);
  91   1      
  92   1          /* Set the priority. */
  93   1          stopTimer_ISR_SetPriority((uint8)stopTimer_ISR_INTC_PRIOR_NUMBER);
  94   1      
  95   1          /* Enable it. */
  96   1          stopTimer_ISR_Enable();
  97   1      }
  98          
  99          
 100          /*******************************************************************************
 101          * Function Name: stopTimer_ISR_Stop
 102          ********************************************************************************
 103          *
 104          * Summary:
 105          *   Disables and removes the interrupt.
 106          *
 107          * Parameters:  
 108          *   None
 109          *
 110          * Return:
 111          *   None
 112          *
 113          *******************************************************************************/
 114          void stopTimer_ISR_Stop(void) 
C51 COMPILER V9.51   STOPTIMER_ISR                                                         03/23/2015 22:46:16 PAGE 3   

 115          {
 116   1          /* Disable this interrupt. */
 117   1          stopTimer_ISR_Disable();
 118   1      }
 119          
 120          
 121          /*******************************************************************************
 122          * Function Name: stopTimer_ISR_Interrupt
 123          ********************************************************************************
 124          * Summary:
 125          *   The default Interrupt Service Routine for stopTimer_ISR.
 126          *
 127          *   Add custom code between the coments to keep the next version of this file
 128          *   from over writting your code.
 129          *
 130          * Parameters:  
 131          *   None
 132          *
 133          * Return:
 134          *   None
 135          *
 136          *******************************************************************************/
 137          CY_ISR(stopTimer_ISR_Interrupt)
 138          {
 139   1          /*  Place your Interrupt code here. */
 140   1          /* `#START stopTimer_ISR_Interrupt` */
 141   1          
 142   1          uint8 time_str[20];
 143   1          
 144   1          uint8 tenth_seconds;
 145   1          uint8 seconds;
 146   1          uint8 minutes;
 147   1          uint8 hours;
 148   1          
 149   1          tenth_seconds = tenthSec_CNTR_ReadCounter();    
 150   1          seconds = sec_CNTR_ReadCounter();
 151   1          minutes = min_CNTR_ReadCounter();    
 152   1          hours = hr_CNTR_ReadCounter();
 153   1              
 154   1          sprintf(time_str, "%d:%d:%d.%d", (int) hours, (int) minutes, (int) seconds, (int) tenth_seconds);
 155   1          
 156   1          LCD_ClearDisplay();
 157   1          LCD_Position(0,0);
 158   1          LCD_PrintString("Done! Time:");
 159   1          LCD_Position(1,0);   
 160   1          LCD_PrintString(time_str);
 161   1      
 162   1          /* `#END` */
 163   1      
 164   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 165   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 166   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (stopTimer_ISR__ES2_PATCH ))      
                          stopTimer_ISR_ISR_PATCH();
                      #endif /* CYDEV_CHIP_REVISION_USED */
 169   1          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3) */
 170   1      }
 171          
 172          
 173          /*******************************************************************************
 174          * Function Name: stopTimer_ISR_SetVector
 175          ********************************************************************************
 176          *
C51 COMPILER V9.51   STOPTIMER_ISR                                                         03/23/2015 22:46:16 PAGE 4   

 177          * Summary:
 178          *   Change the ISR vector for the Interrupt. Note calling stopTimer_ISR_Start
 179          *   will override any effect this method would have had. To set the vector 
 180          *   before the component has been started use stopTimer_ISR_StartEx instead.
 181          *
 182          * Parameters:
 183          *   address: Address of the ISR to set in the interrupt vector table.
 184          *
 185          * Return:
 186          *   None
 187          *
 188          *******************************************************************************/
 189          void stopTimer_ISR_SetVector(cyisraddress address) 
 190          {
 191   1          CY_SET_REG16(stopTimer_ISR_INTC_VECTOR, (uint16) address);
 192   1      }
 193          
 194          
 195          /*******************************************************************************
 196          * Function Name: stopTimer_ISR_GetVector
 197          ********************************************************************************
 198          *
 199          * Summary:
 200          *   Gets the "address" of the current ISR vector for the Interrupt.
 201          *
 202          * Parameters:
 203          *   None
 204          *
 205          * Return:
 206          *   Address of the ISR in the interrupt vector table.
 207          *
 208          *******************************************************************************/
 209          cyisraddress stopTimer_ISR_GetVector(void) 
 210          {
 211   1          return (cyisraddress) CY_GET_REG16(stopTimer_ISR_INTC_VECTOR);
 212   1      }
 213          
 214          
 215          /*******************************************************************************
 216          * Function Name: stopTimer_ISR_SetPriority
 217          ********************************************************************************
 218          *
 219          * Summary:
 220          *   Sets the Priority of the Interrupt. Note calling stopTimer_ISR_Start
 221          *   or stopTimer_ISR_StartEx will override any effect this method would 
 222          *   have had. This method should only be called after stopTimer_ISR_Start or 
 223          *   stopTimer_ISR_StartEx has been called. To set the initial
 224          *   priority for the component use the cydwr file in the tool.
 225          *
 226          * Parameters:
 227          *   priority: Priority of the interrupt. 0 - 7, 0 being the highest.
 228          *
 229          * Return:
 230          *   None
 231          *
 232          *******************************************************************************/
 233          void stopTimer_ISR_SetPriority(uint8 priority) 
 234          {
 235   1          *stopTimer_ISR_INTC_PRIOR = priority << 5;
 236   1      }
 237          
 238          
C51 COMPILER V9.51   STOPTIMER_ISR                                                         03/23/2015 22:46:16 PAGE 5   

 239          /*******************************************************************************
 240          * Function Name: stopTimer_ISR_GetPriority
 241          ********************************************************************************
 242          *
 243          * Summary:
 244          *   Gets the Priority of the Interrupt.
 245          *
 246          * Parameters:
 247          *   None
 248          *
 249          * Return:
 250          *   Priority of the interrupt. 0 - 7, 0 being the highest.
 251          *
 252          *******************************************************************************/
 253          uint8 stopTimer_ISR_GetPriority(void) 
 254          {
 255   1          uint8 priority;
 256   1      
 257   1      
 258   1          priority = *stopTimer_ISR_INTC_PRIOR >> 5;
 259   1      
 260   1          return priority;
 261   1      }
 262          
 263          
 264          /*******************************************************************************
 265          * Function Name: stopTimer_ISR_Enable
 266          ********************************************************************************
 267          *
 268          * Summary:
 269          *   Enables the interrupt.
 270          *
 271          * Parameters:
 272          *   None
 273          *
 274          * Return:
 275          *   None
 276          *
 277          *******************************************************************************/
 278          void stopTimer_ISR_Enable(void) 
 279          {
 280   1          /* Enable the general interrupt. */
 281   1          *stopTimer_ISR_INTC_SET_EN = stopTimer_ISR__INTC_MASK;
 282   1      }
 283          
 284          
 285          /*******************************************************************************
 286          * Function Name: stopTimer_ISR_GetState
 287          ********************************************************************************
 288          *
 289          * Summary:
 290          *   Gets the state (enabled, disabled) of the Interrupt.
 291          *
 292          * Parameters:
 293          *   None
 294          *
 295          * Return:
 296          *   1 if enabled, 0 if disabled.
 297          *
 298          *******************************************************************************/
 299          uint8 stopTimer_ISR_GetState(void) 
 300          {
C51 COMPILER V9.51   STOPTIMER_ISR                                                         03/23/2015 22:46:16 PAGE 6   

 301   1          /* Get the state of the general interrupt. */
 302   1          return ((*stopTimer_ISR_INTC_SET_EN & (uint8)stopTimer_ISR__INTC_MASK) != 0u) ? 1u:0u;
 303   1      }
 304          
 305          
 306          /*******************************************************************************
 307          * Function Name: stopTimer_ISR_Disable
 308          ********************************************************************************
 309          *
 310          * Summary:
 311          *   Disables the Interrupt.
 312          *
 313          * Parameters:
 314          *   None
 315          *
 316          * Return:
 317          *   None
 318          *
 319          *******************************************************************************/
 320          void stopTimer_ISR_Disable(void) 
 321          {
 322   1          /* Disable the general interrupt. */
 323   1          *stopTimer_ISR_INTC_CLR_EN = stopTimer_ISR__INTC_MASK;
 324   1      }
 325          
 326          
 327          /*******************************************************************************
 328          * Function Name: stopTimer_ISR_SetPending
 329          ********************************************************************************
 330          *
 331          * Summary:
 332          *   Causes the Interrupt to enter the pending state, a software method of
 333          *   generating the interrupt.
 334          *
 335          * Parameters:
 336          *   None
 337          *
 338          * Return:
 339          *   None
 340          *
 341          *******************************************************************************/
 342          void stopTimer_ISR_SetPending(void) 
 343          {
 344   1          *stopTimer_ISR_INTC_SET_PD = stopTimer_ISR__INTC_MASK;
 345   1      }
 346          
 347          
 348          /*******************************************************************************
 349          * Function Name: stopTimer_ISR_ClearPending
 350          ********************************************************************************
 351          *
 352          * Summary:
 353          *   Clears a pending interrupt.
 354          *
 355          * Parameters:
 356          *   None
 357          *
 358          * Return:
 359          *   None
 360          *
 361          *******************************************************************************/
 362          void stopTimer_ISR_ClearPending(void) 
C51 COMPILER V9.51   STOPTIMER_ISR                                                         03/23/2015 22:46:16 PAGE 7   

 363          {
 364   1          *stopTimer_ISR_INTC_CLR_PD = stopTimer_ISR__INTC_MASK;
 365   1      }
 366          
 367          #endif /* End check for removal by optimization */
 368          
 369          
 370          /* [] END OF FILE */
C51 COMPILER V9.51   STOPTIMER_ISR                                                         03/23/2015 22:46:16 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION stopTimer_ISR_Start (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 57
0000 120000      R     LCALL   stopTimer_ISR_Disable
                                           ; SOURCE LINE # 60
0003 7E00        R     MOV     R6,#HIGH stopTimer_ISR_Interrupt
0005 7F00        R     MOV     R7,#LOW stopTimer_ISR_Interrupt
0007 120000      R     LCALL   _stopTimer_ISR_SetVector
                                           ; SOURCE LINE # 63
000A 7F07              MOV     R7,#07H
000C 120000      R     LCALL   _stopTimer_ISR_SetPriority
                                           ; SOURCE LINE # 66
000F 120000      R     LCALL   stopTimer_ISR_Enable
                                           ; SOURCE LINE # 67
0012 22                RET     
             ; FUNCTION stopTimer_ISR_Start (END)

             ; FUNCTION _stopTimer_ISR_StartEx (BEGIN)
                                           ; SOURCE LINE # 84
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 87
0008 120000      R     LCALL   stopTimer_ISR_Disable
                                           ; SOURCE LINE # 90
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _stopTimer_ISR_SetVector
                                           ; SOURCE LINE # 93
0016 7F07              MOV     R7,#07H
0018 120000      R     LCALL   _stopTimer_ISR_SetPriority
                                           ; SOURCE LINE # 96
001B 120000      R     LCALL   stopTimer_ISR_Enable
                                           ; SOURCE LINE # 97
001E 22                RET     
             ; FUNCTION _stopTimer_ISR_StartEx (END)

             ; FUNCTION stopTimer_ISR_Stop (BEGIN)
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 117
0000 120000      R     LCALL   stopTimer_ISR_Disable
                                           ; SOURCE LINE # 118
0003 22                RET     
             ; FUNCTION stopTimer_ISR_Stop (END)

             ; FUNCTION stopTimer_ISR_Interrupt (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
C51 COMPILER V9.51   STOPTIMER_ISR                                                         03/23/2015 22:46:16 PAGE 9   

0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 149
002B 120000      E     LCALL   tenthSec_CNTR_ReadCounter
002E 900000      R     MOV     DPTR,#tenth_seconds
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
0033 120000      E     LCALL   sec_CNTR_ReadCounter
0036 900000      R     MOV     DPTR,#seconds
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
003B 120000      E     LCALL   min_CNTR_ReadCounter
003E 900000      R     MOV     DPTR,#minutes
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
0043 120000      E     LCALL   hr_CNTR_ReadCounter
0046 900000      R     MOV     DPTR,#hours
0049 EF                MOV     A,R7
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
004B 7B01              MOV     R3,#01H
004D 7A00        R     MOV     R2,#HIGH time_str
004F 7900        R     MOV     R1,#LOW time_str
0051 C003              PUSH    AR3
0053 C002              PUSH    AR2
0055 C001              PUSH    AR1
0057 7BFF              MOV     R3,#0FFH
0059 7A00        R     MOV     R2,#HIGH ?SC_0
005B 7900        R     MOV     R1,#LOW ?SC_0
005D 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0060 120000      E     LCALL   ?C?PSTXDATA
0063 900000      R     MOV     DPTR,#hours
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 7E00              MOV     R6,#00H
006A 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
006D EE                MOV     A,R6
006E F0                MOVX    @DPTR,A
006F A3                INC     DPTR
0070 EF                MOV     A,R7
0071 F0                MOVX    @DPTR,A
0072 900000      R     MOV     DPTR,#minutes
0075 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   STOPTIMER_ISR                                                         03/23/2015 22:46:16 PAGE 10  

0076 FF                MOV     R7,A
0077 7E00              MOV     R6,#00H
0079 900000      E     MOV     DPTR,#?_sprintf?BYTE+08H
007C EE                MOV     A,R6
007D F0                MOVX    @DPTR,A
007E A3                INC     DPTR
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
0081 900000      R     MOV     DPTR,#seconds
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 7E00              MOV     R6,#00H
0088 900000      E     MOV     DPTR,#?_sprintf?BYTE+0AH
008B EE                MOV     A,R6
008C F0                MOVX    @DPTR,A
008D A3                INC     DPTR
008E EF                MOV     A,R7
008F F0                MOVX    @DPTR,A
0090 900000      R     MOV     DPTR,#tenth_seconds
0093 E0                MOVX    A,@DPTR
0094 FF                MOV     R7,A
0095 7E00              MOV     R6,#00H
0097 900000      E     MOV     DPTR,#?_sprintf?BYTE+0CH
009A EE                MOV     A,R6
009B F0                MOVX    @DPTR,A
009C A3                INC     DPTR
009D EF                MOV     A,R7
009E F0                MOVX    @DPTR,A
009F D001              POP     AR1
00A1 D002              POP     AR2
00A3 D003              POP     AR3
00A5 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 156
00A8 7F01              MOV     R7,#01H
00AA 120000      E     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 157
00AD 7D00              MOV     R5,#00H
00AF 7F00              MOV     R7,#00H
00B1 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 158
00B4 7BFF              MOV     R3,#0FFH
00B6 7A00        R     MOV     R2,#HIGH ?SC_12
00B8 7900        R     MOV     R1,#LOW ?SC_12
00BA 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 159
00BD 7D00              MOV     R5,#00H
00BF 7F01              MOV     R7,#01H
00C1 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 160
00C4 7B01              MOV     R3,#01H
00C6 7A00        R     MOV     R2,#HIGH time_str
00C8 7900        R     MOV     R1,#LOW time_str
00CA 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 170
00CD D007              POP     AR7
00CF D006              POP     AR6
00D1 D005              POP     AR5
00D3 D004              POP     AR4
00D5 D003              POP     AR3
00D7 D002              POP     AR2
00D9 D001              POP     AR1
00DB D000              POP     AR0
C51 COMPILER V9.51   STOPTIMER_ISR                                                         03/23/2015 22:46:16 PAGE 11  

00DD D0D0              POP     PSW
00DF D000        E     POP     ?C?XPAGE1SFR
00E1 D086              POP     DPS
00E3 D084              POP     DPL1
00E5 D085              POP     DPH1
00E7 D082              POP     DPL
00E9 D083              POP     DPH
00EB D0F0              POP     B
00ED D0E0              POP     ACC
00EF 32                RETI    
             ; FUNCTION stopTimer_ISR_Interrupt (END)

             ; FUNCTION _stopTimer_ISR_SetVector (BEGIN)
                                           ; SOURCE LINE # 189
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
0008 7B02              MOV     R3,#02H
000A 7A44              MOV     R2,#044H
000C 7904              MOV     R1,#04H
000E 900000      R     MOV     DPTR,#address
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 AD07              MOV     R5,AR7
0018 AC06              MOV     R4,AR6
001A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 192
001D 22                RET     
             ; FUNCTION _stopTimer_ISR_SetVector (END)

             ; FUNCTION stopTimer_ISR_GetVector (BEGIN)
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7904              MOV     R1,#04H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 212
0009         ?C0006:
0009 22                RET     
             ; FUNCTION stopTimer_ISR_GetVector (END)

             ; FUNCTION _stopTimer_ISR_SetPriority (BEGIN)
                                           ; SOURCE LINE # 233
0000 900000      R     MOV     DPTR,#priority
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
0005 900000      R     MOV     DPTR,#priority
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
C51 COMPILER V9.51   STOPTIMER_ISR                                                         03/23/2015 22:46:16 PAGE 12  

000B C4                SWAP    A
000C 33                RLC     A
000D 54E0              ANL     A,#0E0H
000F FF                MOV     R7,A
0010 904482            MOV     DPTR,#04482H
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
0015 22                RET     
             ; FUNCTION _stopTimer_ISR_SetPriority (END)

             ; FUNCTION stopTimer_ISR_GetPriority (BEGIN)
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 258
0000 904482            MOV     DPTR,#04482H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 C4                SWAP    A
0007 13                RRC     A
0008 5407              ANL     A,#07H
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#priority
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 260
0010 900000      R     MOV     DPTR,#priority
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 261
0015         ?C0008:
0015 22                RET     
             ; FUNCTION stopTimer_ISR_GetPriority (END)

             ; FUNCTION stopTimer_ISR_Enable (BEGIN)
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 281
0000 9044C0            MOV     DPTR,#044C0H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 282
0006 22                RET     
             ; FUNCTION stopTimer_ISR_Enable (END)

             ; FUNCTION stopTimer_ISR_GetState (BEGIN)
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 302
0000 9044C0            MOV     DPTR,#044C0H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E204            JNB     ACC.2,?C0010
0009 7F01              MOV     R7,#01H
000B 8002              SJMP    ?C0011
000D         ?C0010:
000D 7F00              MOV     R7,#00H
000F         ?C0011:
                                           ; SOURCE LINE # 303
000F         ?C0012:
C51 COMPILER V9.51   STOPTIMER_ISR                                                         03/23/2015 22:46:16 PAGE 13  

000F 22                RET     
             ; FUNCTION stopTimer_ISR_GetState (END)

             ; FUNCTION stopTimer_ISR_Disable (BEGIN)
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 323
0000 9044C8            MOV     DPTR,#044C8H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
0006 22                RET     
             ; FUNCTION stopTimer_ISR_Disable (END)

             ; FUNCTION stopTimer_ISR_SetPending (BEGIN)
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
0000 9044D0            MOV     DPTR,#044D0H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 345
0006 22                RET     
             ; FUNCTION stopTimer_ISR_SetPending (END)

             ; FUNCTION stopTimer_ISR_ClearPending (BEGIN)
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 364
0000 9044D8            MOV     DPTR,#044D8H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
0006 22                RET     
             ; FUNCTION stopTimer_ISR_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    422    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----      30
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
